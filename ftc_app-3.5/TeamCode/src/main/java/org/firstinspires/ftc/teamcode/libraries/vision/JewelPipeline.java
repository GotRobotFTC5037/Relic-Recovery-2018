package org.firstinspires.ftc.teamcode.libraries.vision;

import org.corningrobotics.enderbots.endercv.OpenCVPipeline;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfKeyPoint;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgproc.Imgproc;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

/**
* JewelPipeline class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class JewelPipeline extends OpenCVPipeline {

	//Outputs
	private Mat resizeImageOutput = new Mat();
	private Mat blurOutput = new Mat();
	private Mat hsvThreshold0Output = new Mat();
	private Mat cvErode0Output = new Mat();
	private Mat cvDilate0Output = new Mat();
	private MatOfKeyPoint findBlobs0Output = new MatOfKeyPoint();
	private Mat hsvThreshold1Output = new Mat();
	private Mat hsvThreshold2Output = new Mat();
	private Mat cvAddOutput = new Mat();
	private Mat cvErode1Output = new Mat();
	private Mat cvDilate1Output = new Mat();
	private MatOfKeyPoint findBlobs1Output = new MatOfKeyPoint();

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	public void process(Mat source0) {
		Imgproc.resize(source0, resizeImageOutput, new Size(320.0, 180.0), 0.0, 0.0, Imgproc.INTER_AREA);

		double kernelSize = 2 * 5.0 + 1;
		Imgproc.blur(resizeImageOutput, blurOutput, new Size(kernelSize, kernelSize));

		Imgproc.cvtColor(blurOutput, hsvThreshold0Output, Imgproc.COLOR_BGR2HSV);

		double[] blueHueThreshold = {70.0, 140.0};
		double[] blueSaturationThreshold = {115.0, 255.0};
		double[] blueValueThreshold = {0.0, 255.0};
		Core.inRange(blurOutput, new Scalar(blueHueThreshold[0], blueSaturationThreshold[0], blueValueThreshold[0]),
				new Scalar(blueHueThreshold[1], blueSaturationThreshold[1], blueValueThreshold[1]), hsvThreshold0Output);

		Imgproc.erode(hsvThreshold0Output, cvErode0Output, new Mat(), new Point(-1, -1), 3,  Core.BORDER_CONSTANT, new Scalar(-1));
		Imgproc.dilate(cvErode0Output, cvDilate0Output, new Mat(), new Point(-1, -1), 6, Core.BORDER_CONSTANT, new Scalar(-1));

		double[] findBlobs0Circularity = {0.8, 1.0};
		findBlobs(cvDilate0Output, 1000.0, findBlobs0Circularity, false, findBlobs0Output);

		double[] redHueThreshold1 = {140.0, 180.0};
		double[] redSaturationThreshold1 = {170.0, 255.0};
		double[] redValueThreshold1 = {0.0, 255.0};
		Core.inRange(blurOutput, new Scalar(redHueThreshold1[0], redSaturationThreshold1[0], redValueThreshold1[0]),
				new Scalar(redHueThreshold1[1], redSaturationThreshold1[1], redValueThreshold1[1]), hsvThreshold0Output);

		double[] redHueThreshold2 = {0.0, 5.0};
		double[] redSaturationThreshold2 = {160.0, 255.0};
		double[] redValueThreshold2 = {0.0, 255.0};
		Core.inRange(blurOutput, new Scalar(redHueThreshold2[0], redSaturationThreshold2[0], redValueThreshold2[0]),
				new Scalar(redHueThreshold2[1], redSaturationThreshold2[1], redValueThreshold2[1]), hsvThreshold0Output);

		Core.add(hsvThreshold1Output, hsvThreshold2Output, cvAddOutput);

		// Step CV_erode1:
		Mat cvErode1Src = cvAddOutput;
		Mat cvErode1Kernel = new Mat();
		Point cvErode1Anchor = new Point(-1, -1);
		double cvErode1Iterations = 3.0;
		int cvErode1Bordertype = Core.BORDER_CONSTANT;
		Scalar cvErode1Bordervalue = new Scalar(-1);
		cvErode(cvErode1Src, cvErode1Kernel, cvErode1Anchor, cvErode1Iterations, cvErode1Bordertype, cvErode1Bordervalue, cvErode1Output);

		// Step CV_dilate1:
		Mat cvDilate1Src = cvErode1Output;
		Mat cvDilate1Kernel = new Mat();
		Point cvDilate1Anchor = new Point(-1, -1);
		double cvDilate1Iterations = 9.0;
		int cvDilate1Bordertype = Core.BORDER_CONSTANT;
		Scalar cvDilate1Bordervalue = new Scalar(-1);
		cvDilate(cvDilate1Src, cvDilate1Kernel, cvDilate1Anchor, cvDilate1Iterations, cvDilate1Bordertype, cvDilate1Bordervalue, cvDilate1Output);

		// Step Find_Blobs1:
		Mat findBlobs1Input = cvDilate1Output;
		double findBlobs1MinArea = 1000.0;
		double[] findBlobs1Circularity = {0.743879472693032, 1.0};
		boolean findBlobs1DarkBlobs = false;
		findBlobs(findBlobs1Input, findBlobs1MinArea, findBlobs1Circularity, findBlobs1DarkBlobs, findBlobs1Output);

	}

	/**
	 * This method is a generated getter for the output of a Resize_Image.
	 * @return Mat output from Resize_Image.
	 */
	public Mat resizeImageOutput() {
		return resizeImageOutput;
	}

	/**
	 * This method is a generated getter for the output of a Blur.
	 * @return Mat output from Blur.
	 */
	public Mat blurOutput() {
		return blurOutput;
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThreshold0Output() {
		return hsvThreshold0Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_erode.
	 * @return Mat output from CV_erode.
	 */
	public Mat cvErode0Output() {
		return cvErode0Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_dilate.
	 * @return Mat output from CV_dilate.
	 */
	public Mat cvDilate0Output() {
		return cvDilate0Output;
	}

	/**
	 * This method is a generated getter for the output of a Find_Blobs.
	 * @return MatOfKeyPoint output from Find_Blobs.
	 */
	public MatOfKeyPoint findBlobs0Output() {
		return findBlobs0Output;
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThreshold1Output() {
		return hsvThreshold1Output;
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThreshold2Output() {
		return hsvThreshold2Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_add.
	 * @return Mat output from CV_add.
	 */
	public Mat cvAddOutput() {
		return cvAddOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_erode.
	 * @return Mat output from CV_erode.
	 */
	public Mat cvErode1Output() {
		return cvErode1Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_dilate.
	 * @return Mat output from CV_dilate.
	 */
	public Mat cvDilate1Output() {
		return cvDilate1Output;
	}

	/**
	 * This method is a generated getter for the output of a Find_Blobs.
	 * @return MatOfKeyPoint output from Find_Blobs.
	 */
	public MatOfKeyPoint findBlobs1Output() {
		return findBlobs1Output;
	}

	@Override
	public Mat processFrame(Mat rgba, Mat gray) {
		return rgba;
	}

	/**
	 * Expands area of lower value in an image.
	 * @param src the Image to erode.
	 * @param kernel the kernel for erosion.
	 * @param anchor the center of the kernel.
	 * @param iterations the number of times to perform the erosion.
	 * @param borderType pixel extrapolation method.
	 * @param borderValue value to be used for a constant border.
	 * @param dst Output Image.
	 */
	private void cvErode(Mat src, Mat kernel, Point anchor, double iterations,
		int borderType, Scalar borderValue, Mat dst) {
		if (kernel == null) {
			kernel = new Mat();
		}
		if (anchor == null) {
			anchor = new Point(-1,-1);
		}
		if (borderValue == null) {
			borderValue = new Scalar(-1);
		}
		Imgproc.erode(src, dst, kernel, anchor, (int)iterations, borderType, borderValue);
	}

	/**
	 * Expands area of higher value in an image.
	 * @param src the Image to dilate.
	 * @param kernel the kernel for dilation.
	 * @param anchor the center of the kernel.
	 * @param iterations the number of times to perform the dilation.
	 * @param borderType pixel extrapolation method.
	 * @param borderValue value to be used for a constant border.
	 * @param dst Output Image.
	 */
	private void cvDilate(Mat src, Mat kernel, Point anchor, double iterations,
	int borderType, Scalar borderValue, Mat dst) {
		if (kernel == null) {
			kernel = new Mat();
		}
		if (anchor == null) {
			anchor = new Point(-1,-1);
		}
		if (borderValue == null){
			borderValue = new Scalar(-1);
		}
		Imgproc.dilate(src, dst, kernel, anchor, (int)iterations, borderType, borderValue);
	}

	/**
	 * Detects groups of pixels in an image.
	 * @param input The image on which to perform the find blobs.
	 * @param minArea The minimum size of a blob that will be found
	 * @param circularity The minimum and maximum circularity of blobs that will be found
	 * @param darkBlobs The boolean that determines if light or dark blobs are found.
	 * @param blobList The output where the MatOfKeyPoint is stored.
	 */
	private void findBlobs(Mat input, double minArea, double[] circularity,
		Boolean darkBlobs, MatOfKeyPoint blobList) {
		FeatureDetector blobDet = FeatureDetector.create(FeatureDetector.SIMPLEBLOB);
		try {
			File tempFile = File.createTempFile("config", ".xml");

			StringBuilder config = new StringBuilder();

			config.append("<?xml version=\"1.0\"?>\n");
			config.append("<opencv_storage>\n");
			config.append("<thresholdStep>10.</thresholdStep>\n");
			config.append("<minThreshold>50.</minThreshold>\n");
			config.append("<maxThreshold>220.</maxThreshold>\n");
			config.append("<minRepeatability>2</minRepeatability>\n");
			config.append("<minDistBetweenBlobs>10.</minDistBetweenBlobs>\n");
			config.append("<filterByColor>1</filterByColor>\n");
			config.append("<blobColor>");
			config.append((darkBlobs ? 0 : 255));
			config.append("</blobColor>\n");
			config.append("<filterByArea>1</filterByArea>\n");
			config.append("<minArea>");
			config.append(minArea);
			config.append("</minArea>\n");
			config.append("<maxArea>");
			config.append(Integer.MAX_VALUE);
			config.append("</maxArea>\n");
			config.append("<filterByCircularity>1</filterByCircularity>\n");
			config.append("<minCircularity>");
			config.append(circularity[0]);
			config.append("</minCircularity>\n");
			config.append("<maxCircularity>");
			config.append(circularity[1]);
			config.append("</maxCircularity>\n");
			config.append("<filterByInertia>1</filterByInertia>\n");
			config.append("<minInertiaRatio>0.1</minInertiaRatio>\n");
			config.append("<maxInertiaRatio>" + Integer.MAX_VALUE + "</maxInertiaRatio>\n");
			config.append("<filterByConvexity>1</filterByConvexity>\n");
			config.append("<minConvexity>0.95</minConvexity>\n");
			config.append("<maxConvexity>" + Integer.MAX_VALUE + "</maxConvexity>\n");
			config.append("</opencv_storage>\n");
			FileWriter writer;
			writer = new FileWriter(tempFile, false);
			writer.write(config.toString());
			writer.close();
			blobDet.read(tempFile.getPath());
		} catch (IOException e) {
			e.printStackTrace();
		}

		blobDet.detect(input, blobList);
	}
}

